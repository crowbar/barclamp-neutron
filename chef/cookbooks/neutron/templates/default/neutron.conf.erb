[DEFAULT]
# Show more verbose log output (sets INFO log level output)
verbose = <%= @verbose ? "True" : "False" %>

# Show debugging output in logs (sets DEBUG log level output)
debug = <%= @debug ? "True" : "False" %>

root_helper=sudo <%=@rootwrap_bin%> /etc/neutron/rootwrap.conf

# Log to this file. Make sure you do not set the same log
# file for both the API and registry servers!
log_dir = /var/log/neutron

bind_host = <%= @service_host %>

bind_port = <%= @service_port %>


# ================= Syslog Options ============================
# Send logs to syslog (/dev/log) instead of to file specified
# by `log-file`
use_syslog = <%= @use_syslog ? "True" : "False" %>

# Facility to use. If unset defaults to LOG_USER.
# syslog_log_facility = LOG_LOCAL0


<% if @rabbit_settings -%>
rabbit_host=<%= @rabbit_settings[:address] %>
<% unless @rabbit_settings[:port].nil? -%>
rabbit_port=<%= @rabbit_settings[:port] %>
<% end -%>
rabbit_userid=<%= @rabbit_settings[:user] %>
rabbit_password=<%= @rabbit_settings[:password] %>
rabbit_virtual_host=<%= @rabbit_settings[:vhost] %>
<% end -%>

rpc_backend=<%= @node[:neutron][:amqp_backend] %>

<% if @networking_plugin == 'cisco' -%>
core_plugin = neutron.plugins.cisco.network_plugin.PluginV2
<% elsif @networking_plugin == 'openvswitch' -%>
core_plugin = neutron.plugins.openvswitch.ovs_neutron_plugin.OVSNeutronPluginV2
<% elsif @networking_plugin == 'linuxbridge' -%>
core_plugin = neutron.plugins.linuxbridge.lb_neutron_plugin.LinuxBridgePluginV2
<% end -%>


#================dhcp agent====================
state_path = /var/lib/neutron/

dhcp_agent_notification = True
notification_driver = neutron.openstack.common.notifier.rpc_notifier

# LinuxBridge
#interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
# Ryu
#interface_driver = neutron.agent.linux.interface.RyuInterfaceDriver

# The agent can use other DHCP drivers.  Dnsmasq is the simplest and requires
# no additional setup of the DHCP server.
dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq

# Allow overlapping IP (Must have kernel build with CONFIG_NET_NS=y and
# iproute2 package that supports namespaces).
# use_namespaces = True

# Use "sudo neutron-rootwrap /etc/neutron/rootwrap.conf" to use the real
# root filter facility.
# Change to "sudo" to skip the filtering and just run the comand directly

network_scheduler_driver = neutron.scheduler.dhcp_agent_scheduler.ChanceScheduler
network_auto_schedule = True

<% if @neutron_server -%>
#=======================================l3 agent======================
auth_url = <%= @keystone_protocol %>://<%= @keystone_host %>:<%= @keystone_admin_port %>/v2.0
auth_region = RegionOne
admin_tenant_name = <%= @keystone_service_tenant %>
admin_user = <%= @keystone_service_user %>
admin_password = <%= @keystone_service_password %>
interface_driver = <%= @interface_driver %>
external_network_bridge = <%= @external_network_bridge %>
router_scheduler_driver = neutron.scheduler.l3_agent_scheduler.ChanceScheduler
router_auto_schedule = True
metadata_ip = <%= @metadata_host %>
metadata_port = <%= @metadata_port %>

# Enable SSL on the API server
use_ssl = <%= @ssl_enabled ? "True" : "False" %>

# Certificate file to use when starting API server securely
ssl_cert_file = <%= @ssl_cert_file %>

# Private key file to use when starting API server securely
ssl_key_file = <%= @ssl_key_file %>
auth_strategy = keystone

# CA certificate file to use when starting API server securely to
# verify connecting clients. This is an optional parameter only required if
# API clients need to authenticate to the API server using SSL certificates
# signed by a trusted CA
<% if @ssl_cert_required -%>
ssl_ca_file = <%= @ssl_ca_file %>
<% else -%>
#ssl_ca_file = /path/to/cafile
<% end -%>
<% end -%>
################# sql section will be used for OVS plugin config
[DATABASE]
## SQLAlchemy connection string for the reference implementation registry
## server. Any valid SQLAlchemy connection string is fine.
## See: http://bit.ly/ideIpI
sql_connection = <%= @sql_connection %>
## Period in seconds after which SQLAlchemy should reestablish its connection
## to the database.
sqlalchemy_pool_size = <%= @sql_min_pool_size %>
sqlalchemy_max_overflow = <%= @sql_max_pool_overflow %>
sqlalchemy_pool_timeout = <%= @sql_pool_timeout %>
###############

# Path to the extensions.  Note that this can be a colon-separated list of
# paths.  For example:
# api_extensions_path = extensions:/path/to/more/extensions:/even/more/extensions
# The __path__ of neutron.extensions is appended to this, so if your
# extensions are in there you don't need to specify them here
api_extensions_path =

[OVS]
# (StrOpt) Type of network to allocate for tenant networks. The
# default value 'local' is useful only for single-box testing and
# provides no connectivity between hosts. You MUST either change this
# to 'vlan' and configure network_vlan_ranges below or change this to
# 'gre' and configure tunnel_id_ranges below in order for tenant
# networks to provide connectivity between hosts. Set to 'none' to
# disable creation of tenant networks.
#
# Default: tenant_network_type = local
# Example: tenant_network_type = gre

root_helper=sudo <%=@rootwrap_bin%> /etc/neutron/rootwrap.conf


# (ListOpt) Comma-separated list of
# <physical_network>[:<vlan_min>:<vlan_max>] tuples enumerating ranges
# of VLAN IDs on named physical networks that are available for
# allocation. All physical networks listed are available for flat and
# VLAN provider network creation. Specified ranges of VLAN IDs are
# available for tenant network allocation if tenant_network_type is
# 'vlan'. If empty, only gre and local networks may be created.
#
# Default: network_vlan_ranges =
# Example: network_vlan_ranges = physnet1:1000:2999

<% if @networking_mode == 'vlan' -%>
tenant_network_type = vlan
network_vlan_ranges = physnet1:<%= @vlan_start %>:<%= @vlan_end %>
<% elsif @networking_mode == 'gre' -%>
tenant_network_type = gre
tunnel_bridge = <%=@physnet%>
tunnel_id_ranges = <%= node[:neutron][:network][:gre_start]%>:<%= node[:neutron][:network][:gre_stop]%>
local_ip = <%= node.address("os_sdn").addr %>
enable_tunneling = True
<% else -%>
tenant_network_type = local
network_vlan_ranges = physnet1
<% end -%>

# (BoolOpt) Set to True in the server and the agents to enable support
# for GRE networks. Requires kernel support for OVS patch ports and
# GRE tunneling.
#
# Default: enable_tunneling = False

# (ListOpt) Comma-separated list of <tun_min>:<tun_max> tuples
# enumerating ranges of GRE tunnel IDs that are available for tenant
# network allocation if tenant_network_type is 'gre'.
#
# Default: tunnel_id_ranges =
# Example: tunnel_id_ranges = 1:1000

# Do not change this parameter unless you have a good reason to.
# This is the name of the OVS integration bridge. There is one per hypervisor.
# The integration bridge acts as a virtual "patch bay". All VM VIFs are
# attached to this bridge and then "patched" according to their network
# connectivity.
#
#integration_bridge = br-int

# Only used for the agent if tunnel_id_ranges (above) is not empty for
# the server.  In most cases, the default value should be fine.
#
# Default: tunnel_bridge = br-tun

# Uncomment this line for the agent if tunnel_id_ranges (above) is not
# empty for the server. Set local-ip to be the local IP address of
# this hypervisor.
#
# Default: local_ip =

# (ListOpt) Comma-separated list of <physical_network>:<bridge> tuples
# mapping physical network names to the agent's node-specific OVS
# bridge names to be used for flat and VLAN networks. Each bridge must
# exist, and should have a physical network interface configured as a
# port. All physical networks listed in network_vlan_ranges on the
# server should have mappings to appropriate bridges on each agent.
#
# Default: bridge_mappings =
# Example: bridge_mappings = physnet1:br-eth1
bridge_mappings = physnet1:<%=@physnet%>


[composite:neutron]
use = egg:Paste#urlmap
/: neutronversions
/v1.0: neutronapi_v1_0
/v1.1: neutronapi_v1_1

[pipeline:neutronapi_v1_0]
# By default, authentication is disabled.
# To enable Keystone integration uncomment the 
# following line and comment the next one
pipeline = extensions neutronapiapp_v1_0
#pipeline = authN extensions neutronapiapp_v1_0

[pipeline:neutronapi_v1_1]
# By default, authentication is disabled.
# To enable Keystone integration uncomment the 
# following line and comment the next one
pipeline = extensions neutronapiapp_v1_1
#pipeline = authN extensions neutronapiapp_v1_1

[filter:extensions]
paste.filter_factory = neutron.common.extensions:plugin_aware_extension_middleware_factory

[app:neutronversions]
paste.app_factory = neutron.api.versions:Versions.factory

[app:neutronapiapp_v1_0]
paste.app_factory = neutron.api:APIRouterV10.factory

[app:neutronapiapp_v1_1]
paste.app_factory = neutron.api:APIRouterV11.factory

[AGENT]
root_helper=sudo <%=@rootwrap_bin%> /etc/neutron/rootwrap.conf
polling_interval = 2

[SECURITYGROUP]
<% if @networking_plugin == 'openvswitch' or @networking_plugin == 'cisco' -%>
firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver
<% elsif @networking_plugin == 'linuxbridge' -%>
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
<% end -%>

[VLANS]
# (StrOpt) Type of network to allocate for tenant networks. The
# default value 'local' is useful only for single-box testing and
# provides no connectivity between hosts. You MUST change this to
# 'vlan' and configure network_vlan_ranges below in order for tenant
# networks to provide connectivity between hosts. Set to 'none' to
# disable creation of tenant networks.
#
# Default: tenant_network_type = local
# Example: tenant_network_type = vlan
tenant_network_type = vlan

# (ListOpt) Comma-separated list of
# <physical_network>[:<vlan_min>:<vlan_max>] tuples enumerating ranges
# of VLAN IDs on named physical networks that are available for
# allocation. All physical networks listed are available for flat and
# VLAN provider network creation. Specified ranges of VLAN IDs are
# available for tenant network allocation if tenant_network_type is
# 'vlan'. If empty, only local networks may be created.
#
# Default: network_vlan_ranges =
# Example: network_vlan_ranges = physnet1:1000:2999
network_vlan_ranges = physnet1:<%= @vlan_start %>:<%= @vlan_end %>


[LINUX_BRIDGE]
# (ListOpt) Comma-separated list of
# <physical_network>:<physical_interface> tuples mapping physical
# network names to the agent's node-specific physical network
# interfaces to be used for flat and VLAN networks. All physical
# networks listed in network_vlan_ranges on the server should have
# mappings to appropriate interfaces on each agent.
#
# Default: physical_interface_mappings =
# Example: physical_interface_mappings = physnet1:eth1
physical_interface_mappings = physnet1:<%=@physnet%>

[keystone_authtoken]
auth_host = 127.0.0.1
